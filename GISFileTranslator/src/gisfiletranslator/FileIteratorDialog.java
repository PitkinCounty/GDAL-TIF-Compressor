/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gisfiletranslator;

import javax.swing.JFileChooser;
import java.io.File; 
import java.nio.file.Files;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.JOptionPane;
import org.gdal.gdal.gdal;

/**
 *
 * @author andrew.shewmaker
 */
public class FileIteratorDialog extends javax.swing.JDialog {
    String inputDir = "";
    String outputDir = "";
    Boolean displayConsoleDebug = false;
    
    int numFiles = 1;
    
    /**
     * Creates new form FileIteratorDialog
     */
    public FileIteratorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public FileIteratorDialog() {
        initComponents();
        
        if (System.getProperty("user.name").equalsIgnoreCase("andrew.shewmaker")) {
            inputDir = "C:\\Users\\andrew.shewmaker\\Desktop\\OneFoot-MiddleRF\\";
            outputDir = "C:\\Users\\andrew.shewmaker\\Desktop\\OneFoot-MiddleRF\\_TEST_GeoTiff-compressed\\";
            txtNumFiles.setText("1");
            displayConsoleDebug = true;
        }
        else {
            inputDir = "";
            outputDir = "";
            displayConsoleDebug = false;
        }
        
        txtInputDir.setText(inputDir);
        txtOutputDir.setText(outputDir);
        
        this.setTitle(this.getTitle() + "  v1.0");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ofdInput = new javax.swing.JFileChooser();
        sfdOutput = new javax.swing.JFileChooser();
        textArea4 = new java.awt.TextArea();
        textArea3 = new java.awt.TextArea();
        checkbox1 = new java.awt.Checkbox();
        checkbox2 = new java.awt.Checkbox();
        jProgressBar1 = new javax.swing.JProgressBar();
        btnSetInputDirectory = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInputDir = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOutputDir = new javax.swing.JTextPane();
        btnSetOutputDirectory = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txtNumFiles = new java.awt.TextField();
        label1 = new java.awt.Label();
        textField3 = new java.awt.TextField();
        textArea1 = new java.awt.TextArea();
        txtConsole = new java.awt.TextArea();
        checkbox1 = new java.awt.Checkbox();
        checkbox2 = new java.awt.Checkbox();

        ofdInput.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        sfdOutput.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        checkbox1.setLabel("checkbox1");

        checkbox2.setLabel("checkbox2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("[gdal_translate] Batch Process Images");
        setMinimumSize(new java.awt.Dimension(436, 217));

        btnSetInputDirectory.setActionCommand("btnBrowseInput");
        btnSetInputDirectory.setLabel("Set Input Directory");
        btnSetInputDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetInputDirectoryActionPerformed(evt);
            }
        });

        txtInputDir.setName(""); // NOI18N
        jScrollPane1.setViewportView(txtInputDir);

        jScrollPane2.setViewportView(txtOutputDir);

        btnSetOutputDirectory.setText("Set Output Directory");
        btnSetOutputDirectory.setActionCommand("btnBrowseOutput");
        btnSetOutputDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetOutputDirectoryActionPerformed(evt);
            }
        });

        jButton3.setText("Translate");
        jButton3.setActionCommand("btnTranslate");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtNumFiles.setText("5");

        label1.setText("# of File(s)");

        textField3.setText("textField3");

        checkbox1.setLabel("checkbox1");

        checkbox2.setLabel("checkbox2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSetInputDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSetOutputDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNumFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtConsole, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSetInputDirectory)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSetOutputDirectory)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtConsole, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Populate variables from GUI
        inputDir = txtInputDir.getText();
        outputDir = txtOutputDir.getText();
        try {
            numFiles = Integer.parseInt(txtNumFiles.getText());
        }
        catch (Exception e) {
            //txtConsole.append(e.getMessage());
            txtConsole.append("Translate Failed: Invalid entry for  '# files', Input = '" + txtNumFiles.getText() + "'" + System.getProperty("line.separator"));
            numFiles = 0;
            txtNumFiles.setText(Integer.toString(numFiles));
            return;
        }
        
        //Init GUI
        jProgressBar1.setMaximum(numFiles);
        jButton3.setEnabled(false);
        
        //This works, but provides no feedback to the GUI
//        GDALTranslator translator = new GDALTranslator(inputDir, outputDir);
//        String[] commandArray = translator.translate(numFiles);
//        translator.executeSystemCommand(commandArray);
//        txtConsole.append(numFiles + " Files Converted" + System.getProperty("line.separator"));
        
        txtConsole.append("Compressing " + (numFiles > 0 ? numFiles : "All") + " Files ... ");
        SwingWorker<String, Integer> worker = new SwingWorker<String, Integer>() {
            @Override
            protected String doInBackground() throws Exception {
                GDALTranslator translator = new GDALTranslator(inputDir, outputDir);
                String[] commandArray = translator.translate(numFiles);
                String response = "";
                numFiles = 0;
                for (String cmd : commandArray) {
                    response = response.concat(translator.executeSystemCommand(new String[] { cmd }));
                    //JOptionPane.showMessageDialog(null, response + Integer.toString(response.length()), "TITLE", JOptionPane.WARNING_MESSAGE);
                    numFiles++;
                    publish(numFiles);
                }

             // Here we can return some object of whatever type
             // we specified for the first template parameter.
             // (in this case we're auto-boxing 'true').
             return response;
            }

            @Override
            // Can safely update the GUI from this method.
            protected void done() {
                txtConsole.append(" ... Complete" + System.getProperty("line.separator"));
                jProgressBar1.setValue(0);
                jButton3.setEnabled(true);
                
                if (displayConsoleDebug) {
                    String response;
                    try {
                        // Retrieve the return value of doInBackground.
                        response = get();
                        txtConsole.append("Console: " + response);
                    } catch (InterruptedException e) {
                        // This is thrown if the thread's interrupted.
                    } catch (ExecutionException e) {
                        // This is thrown if we throw an exception
                        // from doInBackground.
                    }
                }
            }

            @Override
            // Can safely update the GUI from this method.
            protected void process(List<Integer> chunks) {
                // Here we receive the values that we publish().
                // They may come grouped in chunks.

                int mostRecentValue = chunks.get(chunks.size()-1);
                txtConsole.append(mostRecentValue + ",");
                jProgressBar1.setValue(mostRecentValue);
            }

        };

        worker.execute();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnSetInputDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetInputDirectoryActionPerformed
        // TODO add your handling code here:
        int result = ofdInput.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            // user selected a file
            inputDir = ofdInput.getSelectedFile().getPath();
            if (Files.notExists(ofdInput.getSelectedFile().toPath())) {  // check that the input directory exists
                //System.out.println("ERROR***** NO SUCH DIRECTORY FOUND");
                txtConsole.append("Set InputDirectory Failed: Invalid input directory, Dir = '" + inputDir + "'" + System.getProperty("line.separator"));
            }
        }
        
        //update the textbox regardless whether the inputDir changed
        txtInputDir.setText(inputDir);
    }//GEN-LAST:event_btnSetInputDirectoryActionPerformed

    private void btnSetOutputDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetOutputDirectoryActionPerformed
        // TODO add your handling code here:
        int result = sfdOutput.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // user selected a file
            outputDir = sfdOutput.getSelectedFile().getPath();
            //is there ANY way for outputDir to be an invalid path?
        }
        
        //update the textbox regardless whether the outputDir changed
        txtOutputDir.setText(outputDir);
    }//GEN-LAST:event_btnSetOutputDirectoryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileIteratorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileIteratorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileIteratorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileIteratorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FileIteratorDialog dialog = new FileIteratorDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSetInputDirectory;
    private javax.swing.JButton btnSetOutputDirectory;
    private java.awt.Checkbox checkbox1;
    private java.awt.Checkbox checkbox2;
    private javax.swing.JButton jButton3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label1;
    private javax.swing.JFileChooser ofdInput;
    private javax.swing.JFileChooser sfdOutput;
    private java.awt.TextArea textArea1;
    private java.awt.TextArea textArea3;
    private java.awt.TextArea textArea4;
    private java.awt.TextField textField3;
    private java.awt.TextArea txtConsole;
    private javax.swing.JTextPane txtInputDir;
    private java.awt.TextField txtNumFiles;
    private javax.swing.JTextPane txtOutputDir;
    // End of variables declaration//GEN-END:variables
}
